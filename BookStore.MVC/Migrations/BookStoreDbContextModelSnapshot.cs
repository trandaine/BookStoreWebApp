// <auto-generated />
using System;
using BookStore.MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.MVC.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    partial class BookStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a8755fc-85d9-4ea3-8be9-80eae8455b0c"),
                            DateOfBirth = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@gmali.com",
                            FullName = "Default",
                            Name = "default",
                            Phone = "0123456789",
                            Position = 0
                        },
                        new
                        {
                            Id = new Guid("9f81b5cf-2997-4830-9301-b18538fe6d0a"),
                            DateOfBirth = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@gmali.com",
                            FullName = "Default",
                            Name = "default",
                            Phone = "0123456789",
                            Position = 0
                        });
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MediaId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a20e8d43-7429-4622-968d-7e038d383a0d"),
                            Alias = "default",
                            AuthorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default book",
                            MediaId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Default"
                        },
                        new
                        {
                            Id = new Guid("f125e7ff-5619-460b-9626-83a87b68c208"),
                            Alias = "default",
                            AuthorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Default book",
                            MediaId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Default"
                        });
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea5d9119-294b-40d1-bcde-f66ab255d2de"),
                            Alias = "default",
                            Description = "Default category",
                            Name = "Default",
                            Position = 1
                        },
                        new
                        {
                            Id = new Guid("39420626-51ef-4dfb-ac5b-e5846a2b3085"),
                            Alias = "default",
                            Description = "Default category",
                            Name = "Default",
                            Position = 1
                        });
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7176f36-5a11-40e1-a5e1-31a7451d850e"),
                            Alias = "default",
                            Extension = ".jpg",
                            FileName = "default.jpg",
                            Name = "Default",
                            Position = 1
                        },
                        new
                        {
                            Id = new Guid("5774ad9e-e87c-4620-9d2e-3e62a410ca5d"),
                            Alias = "default",
                            Extension = ".jpg",
                            FileName = "default.jpg",
                            Name = "Default",
                            Position = 1
                        });
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Book", b =>
                {
                    b.HasOne("BookStore.MVC.Data.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.MVC.Data.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.MVC.Data.Entities.Media", "Media")
                        .WithMany("Books")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.MVC.Data.Entities.Media", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
